version: '3.8'

services:
  frontend:
    build:
      context: ../
      dockerfile: deploy/frontend.Dockerfile
    image: fil-relex-frontend:${VERSION:-latest}
    environment:
      - NODE_ENV=production
      - REACT_APP_API_BASE_URL=https://api.example.com/api/v2
    ports:
      - "3003:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - backend

  backend:
    build:
      context: ../
      dockerfile: deploy/backend.Dockerfile
    image: fil-relex-backend:${VERSION:-latest}
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/0?password=${REDIS_PASSWORD}
      - REDIS_SENTINEL_HOSTS=sentinel1:26379,sentinel2:26379
      - REDIS_SENTINEL_MASTER=mymaster
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - SENTRY_DSN=${SENTRY_DSN}
      - JAEGER_HOST=jaeger
      - DATADOG_API_KEY=${DATADOG_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "10000:10000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - db
      - redis
      - sentinel1
      - sentinel2
      - jaeger

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7.4.2
    container_name: redis
    command: >
      sh -c '(echo "port 6379";
             echo "bind 0.0.0.0";
             echo "protected-mode no";
             echo "requirepass ${REDIS_PASSWORD}";
             echo "masterauth ${REDIS_PASSWORD}";
             echo "appendonly yes") > /tmp/redis.conf && redis-server /tmp/redis.conf'
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      app-network:
        aliases:
          - redis.app-network
          - redis

  sentinel1:
    image: redis:7.4.2
    container_name: sentinel1
    command: >
      sh -c "echo 'port 26379
      dir /tmp
      sentinel monitor mymaster redis.app-network 6379 2
      sentinel auth-pass mymaster ${REDIS_PASSWORD}
      sentinel down-after-milliseconds mymaster 5000
      sentinel failover-timeout mymaster 60000
      sentinel parallel-syncs mymaster 1
      requirepass ${REDIS_PASSWORD}' > /etc/sentinel.conf && redis-server /etc/sentinel.conf --sentinel"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      app-network:
        aliases:
          - sentinel1.app-network
          - sentinel1
    ports:
      - "26379:26379"
    depends_on:
      - redis

  sentinel2:
    image: redis:7.4.2
    container_name: sentinel2
    command: >
      sh -c "echo 'port 26380
      dir /tmp
      sentinel monitor mymaster redis.app-network 6379 2
      sentinel auth-pass mymaster ${REDIS_PASSWORD}
      sentinel down-after-milliseconds mymaster 5000
      sentinel failover-timeout mymaster 60000
      sentinel parallel-syncs mymaster 1
      requirepass ${REDIS_PASSWORD}' > /etc/sentinel.conf && redis-server /etc/sentinel.conf --sentinel"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      app-network:
        aliases:
          - sentinel2.app-network
          - sentinel2
    ports:
      - "26380:26380"
    depends_on:
      - redis

  nginx:
    image: nginx:alpine
    volumes:
      - type: bind
        source: ./nginx/conf.d
        target: /etc/nginx/conf.d
      - type: bind
        source: ./certbot/conf
        target: /etc/letsencrypt
      - type: bind
        source: ./certbot/www
        target: /var/www/certbot
      - type: bind
        source: ./nginx/nginx.conf
        target: /etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3002:3000"
    networks:
      - app-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6833:6831/udp"
      - "16687:16686"
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.3
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  app-network:
    driver: bridge 