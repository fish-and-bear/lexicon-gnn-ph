version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: deploy/frontend.Dockerfile
      target: builder  # Stop at build stage for development
    image: fil-relex-frontend:dev
    volumes:
      - ./src:/app/src:ro  # Mount source for hot reloading
      - ./public:/app/public:ro
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_BASE_URL=http://localhost:10000/api/v2
    command: npm start
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  backend:
    build:
      context: .
      dockerfile: deploy/backend.Dockerfile
    image: fil-relex-backend:dev
    volumes:
      - ./backend:/app/backend:ro
      - ./migrations:/app/migrations:ro
      - ./alembic.ini:/app/alembic.ini:ro
      - ./data:/app/data:ro
    ports:
      - "10000:10000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - FLASK_APP=backend.app:app
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://:redis@redis:6379/0
      - REDIS_PASSWORD=redis
      - ALLOWED_ORIGINS=http://localhost:3000
      - PYTHONPATH=/app
    command: gunicorn --bind 0.0.0.0:10000 --workers 4 --threads 2 --timeout 60 --worker-class gevent --worker-connections 1000 --access-logfile - --error-logfile - --log-level info --capture-output backend.app:app
    depends_on:
      - db
      - redis
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/setup_db.sql:/docker-entrypoint-initdb.d/setup_db.sql:ro
      - ./data:/data:ro  # Mount data directory as read-only for imports
    ports:
      - "5432:5432"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.10'
          memory: 256M

  prometheus:
    image: prom/prometheus
    volumes:
      - ./deploy/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    ports:
      - "3001:3000"
    networks:
      - app-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge 